/*--------------------------COPYRIGHT INFORMATION----------------------------+
 |                                                                           |
 | This program contains proprietary information that is a trade secret      |
 | of Cerence, Inc. and also is protected as an unpublished                  |
 | work under applicable Copyright laws. Recipient is to retain this         |
 | program in confidence and is not permitted to use or make copies          |
 | thereof other than as permitted in a prior written agreement with         |
 | Cerence, Inc. or its affiliates.                                          |
 |                                                                           |
 | Copyright (c) 2020 Cerence, Inc.                                          |
 | All rights reserved. Company confidential.                                |
 |                                                                           |
 +---------------------------------------------------------------------------*/

/**
 *  Declaration of nuance_asr5_IRecognizer class
 *  Automatically generated source code! Do not edit manually!
 *
 */

/**
 *  @addtogroup nuance_asr5  nuance_asr5
 *  @{
 *  @addtogroup IRecognizer
 *  @{
 *  @file IRecognizer.h
 *
 *  @brief  The VoCon speech recognizer. <p>
 */

#ifndef NUANCE_ASR5_IRECOGNIZER_H
#define NUANCE_ASR5_IRECOGNIZER_H

#ifdef __cplusplus
extern "C" {
#endif


/*** Declare class handle *********************************************************************************************/

/**
 *  @brief  The VoCon speech recognizer. <p>
 */
struct _nuance_asr5_IRecognizer;
/**
 *  @brief  The VoCon speech recognizer. <p>
 */
typedef struct _nuance_asr5_IRecognizer nuance_asr5_IRecognizer;


/*** Includes *********************************************************************************************************/

/* PAL types */
#include "lh_types.h"

#include "asr5_api_defs.h"

/* API types */
#include "IAsrManager.h"
#include "IRecognizerListener.h"
#include "ResultCode.h"


/*** Methods **********************************************************************************************************/


/**
 *  @brief create a recognizer<p>
 *  Creates a new speech recognizer instance. Each recognizer gets an unique name.
 *  \n
 *
 *  @param[in]     name          name of the recognizer; if more than one recognizer object is created, each one must have an unique name.
 *  @param[in]     asr5Manager   the asr manager object
 *  @param[in]     listener      an \ref IRecognizerListener implementation which is used to report events and results of the recognizer object.
 *  @param[out]    asr5Rec       the new \ref IRecognizer object
 *
 */
ASR5_C_EXPORT nuance_common_ResultCode nuance_asr5_IRecognizer_create
(
    const LH_CHAR *name,
    nuance_asr5_IAsrManager *asr5Manager,
    nuance_asr5_IRecognizerListener *listener,
    nuance_asr5_IRecognizer **asr5Rec
);


/**
 *  @brief Start the speech recognition<p>
 *  Starts the speech recognition. \n
 *
 *  @param[in,out] instance The instance pointer
 *
 */
ASR5_C_EXPORT nuance_common_ResultCode nuance_asr5_IRecognizer_start(nuance_asr5_IRecognizer *instance);


/**
 *  @brief  Stops the recognizer. <p>
 *
 *  <p> This method will stop the recognizer by stopping audio input. </p>
 *  <p> After calling this method a recognition result, if available, can still be obtained. </p>
 *  <p> *NOTE:* If no result was generated by already added search, the empty result should be expected. </p>
 *
 *  @param[in,out] instance The instance pointer
 *
 */
ASR5_C_EXPORT nuance_common_ResultCode nuance_asr5_IRecognizer_stop(nuance_asr5_IRecognizer *instance);


/**
 *  @brief  set the Sem3 Unfolding Script to recognizer. <p>
 *
 *  <p> This method will set the Sem3 Unfolding Script to recognizer. </p>
 *  <p> The accepted unfolding script is LUA script, which shall follow the LUA api wich designed for sem3 unfolding </p>
 *  <p> *NOTE:* The script can be only excuted while setting the application, which has sem3 nlus configured.
 *  So this must be invoked before invoking IAsrManager::setApplications()</p>
 *
 *  @param[in,out] instance The instance pointer
 *  @param[in]     script   The unfolding script string;
 *
 */
ASR5_C_EXPORT nuance_common_ResultCode nuance_asr5_IRecognizer_setSem3UnfoldingScript
(
    nuance_asr5_IRecognizer *instance,
    const LH_CHAR *script
);


/**
 *  @brief  get the relative time from the recognizer started. <p>
 *
 *  <p> This method will return the relative time since the recognizer started. </p>
 *  <p> if currentTime is -1, the returned time is the difference between the current wall clock time and the wall clock time when recognizer started </p>
 *  <p> if currentTime is more than -1, the returned time is the difference between the passing current time and the wall clock time when recognizer started </p>
 *
 *  @param[in,out] instance      The instance pointer
 *  @param[in]     currentTime   pass the current wall clock time with milliseconds
 *
 */
ASR5_C_EXPORT LH_S32 nuance_asr5_IRecognizer_getRelativeTime
(
    nuance_asr5_IRecognizer *instance,
    LH_S32 currentTime
);


/**
 *  Destructor
 */
ASR5_C_EXPORT void nuance_asr5_IRecognizer_destroy(nuance_asr5_IRecognizer *);


#ifdef __cplusplus
}
#endif

#endif /* NUANCE_ASR5_IRECOGNIZER_H */

/** @} */
/** @} */

/**********************************************************************************************************************/
